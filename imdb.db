--Determine the total number of movies released each year and analyse the month-wise trend
select movie.year,count(*) as movie_cnt from movie
group by year;
select strftime('%Y-%m',date_published) as month,count(*) as movie_cnt from movie
group by month;

--Calculate the number of movies produced in the USA or India in the year 2019.
select count(*) as movie_num_2019 from movie
where movie.year=2019 and country like 'USA' or country like 'India'

--Retrieve the unique list of genres present in the dataset.
select distinct genre from genre

--Identify the genre with the highest number of movies produced overall.
select genre,count(*) as cnt from genre
group by genre
order by cnt desc
limit 1

--Determine the count of movies that belong to only one genre.
select count(movie_id) as mv_ct from
(select movie_id,count(genre) as cnt from genre
group by movie_id) a
where cnt=1

--Calculate the average duration of movies in each genre.
select genre, round(avg(movie.duration)) as avg_duration from genre
join movie on movie.id = genre.movie_id
group by genre
order by avg_duration

--Find the rank of the 'thriller' genre among all genres in terms of the number of movies produced
select genre,
count(*) as cnt,
rank() over (order by count(*) desc) as g_rnk
from genre
group by genre
having genre = 'Thriller'

--Retrieve the minimum and maximum values in each column of the ratings table (except movie_id).
select max(avg_rating) as max_avg_rating,
min(avg_rating) as min_avg_rating,
max(total_votes) as max_vote,
min(total_votes) as min_vote,
max(median_rating) as max_mid_rating,
min(median_rating) as min_mid_rating
from ratings

--Identify the top 10 movies based on average rating.
select title,avg_rating from movie
join 
(select * from ratings 
order by avg_rating desc
limit 10) a 
on a.movie_id = movie.id

--Summarise the ratings table based on movie counts by median ratings.
select median_rating,count(*) as movie_count from ratings
group by median_rating
order by median_rating desc

--Identify the production house that has produced the most number of hit movies (average rating > 8).
select production_company,count(avg_rating) as count_rate from movie
join ratings on
movie.id = ratings.movie_id 
where avg_rating > 8 and production_company is not null
group by production_company
order by count_rate desc
limit 1

--Determine the number of movies released in each genre during March 2017 in the USA with more than 1,000 votes.
with q1 as
(select *,cast(strftime('%m',datee) as int) as monthname from
(select *,date(date_published) as datee from movie)),
q2 as
(select id from q1
where year = 2017 and monthname = 7 and country like 'USA')
select genre,count(*) as movie_count from q2
join genre on
genre.movie_id = q2.id
group by genre
order by movie_count desc

--Retrieve movies of each genre starting with the word 'The' and having an average rating > 8.
with q1 as
(select * from genre
join ratings on genre.movie_id = ratings.movie_id and avg_rating>8)
select title,genre from q1
join movie on
movie.id = q1.movie_id and title like 'The %'

--Identify the columns in the names table that have null values.

--Determine the top three directors in the top three genres with movies having an average rating > 8.
with q1 as
(select genre,count(*) as cnt from genre
join ratings on genre.movie_id = ratings.movie_id
where avg_rating > 8
group by genre
order by cnt desc
limit 3),
q2 as
(select name_id,count(*) as ct from director_mapping
join genre on director_mapping.movie_id = genre.movie_id
where genre.genre in (select genre from q1)
group by name_id
order by ct desc
limit 3)
select name from names
join q2 on names.id = q2.name_id

--Find the top two actors whose movies have a median rating >= 8.
with q1 as
(select * from names
join role_mapping on
names.id = role_mapping.name_id
where role_mapping.category = 'actor'),
q2 as 
(select * from q1
join ratings on
q1.movie_id = ratings.movie_id)
select name from 
(select name, count(*) as cnt from q2
where median_rating >=8
group by name
order by cnt desc)
limit 2

--Identify the top three production houses based on the number of votes received by their movies.
with q1 as 
(select * from movie
join ratings on
movie.id = ratings.movie_id
where production_company is not null)
select production_company from
(select production_company,sum(total_votes) as votes from q1
group by production_company
order by votes desc)
limit 3

--Rank actors based on their average ratings in Indian movies released in India.
with q1 as 
(select id from movie
where country like 'India'),
q2 as
(select movie_id,avg_rating from ratings
join q1 on q1.id = ratings.movie_id),
q3 as 
(select name_id,avg_rating from role_mapping
join q2 on q2.movie_id = role_mapping.movie_id
where role_mapping.category = 'actor'),
q4 as
(select name,avg_rating from names
join q3 on names.id = q3.name_id)
select name,
dense_rank() over (order by rate desc) as rankk
from
(select name,avg(avg_rating) as rate from q4
group by name)

--Identify the top five actresses in Hindi movies released in India based on their average ratings.
with q1 as 
(select id from movie
where languages like 'Hindi' and country like 'India'),
q2 as
(select movie_id,avg_rating from ratings
join q1 on q1.id = ratings.movie_id),
q3 as 
(select name_id,avg_rating from role_mapping
join q2 on q2.movie_id = role_mapping.movie_id
where role_mapping.category = 'actress'),
q4 as
(select name,avg_rating from names
join q3 on names.id = q3.name_id)
select name
from (select name,avg(avg_rating) as rate from q4
group by name
order by rate desc)
limit 5

--Classify thriller movies based on average ratings into different categories.
with q1 as
(select genre.movie_id,avg_rating from genre
join ratings on
genre.movie_id = ratings.movie_id
where genre = 'Thriller')
select
case
    when avg_rating between 0 and 2 then '1-star'
    when avg_rating between 2 and 4 then '2-star'
    when avg_rating between 4 and 6 then '3-star'
    when avg_rating between 6 and 8 then '4-star'
    when avg_rating between 8 and 10 then '5-star'
    else 'no rating'
end as star_rating,
count(*) as movie_count
from q1
group by star_rating


--analyse the genre-wise running total and moving average of the average movie duration.
with q1 as
(select genre,round(avg(duration)) as duration_avg from movie
join genre on genre.movie_id = movie.id
group by genre)
select genre,
duration_avg,
sum(duration_avg) over (order by genre) as running_total,
avg(duration_avg) over (order by genre) as moving_avg
from q1

--Identify the five highest-grossing movies of each year that belong to the top three genres.
with q1 as
(select *,
cast(replace(replace(worlwide_gross_income,'$ ',''),'INR ','') as int) as income from movie),
q2 as
(select genre,sum(income) as gross from
(select genre,income from genre
join q1 on genre.movie_id = q1.id
where income is not null)
group by genre
order by gross desc
limit 3)
select distinct title,income from genre
join q1 on genre.movie_id = q1.id
where genre.genre in (select genre from q2)
order by income desc
limit 5


--Determine the top two production houses that have produced the highest number of hits among multilingual movies.
with q1 as 
(select *,
cast(replace(replace(worlwide_gross_income,'$ ',''),'INR ','') as int) as income,
case
    when length(languages)-length(replace(languages,', ',''))=0 then 'unilingual'
    else 'multilingual'
end as lang_num
from movie)
select production_company from
(select production_company,sum(income) from q1
where lang_num = 'multilingual' and production_company is not null
group by production_company
order by sum(income) desc
limit 2)


--Identify the top three actresses based on the number of Super Hit movies (average rating > 8) in the drama genre.
with q1 as
(select movie_id from genre
join movie on genre.movie_id = movie.id
where genre = 'Drama'),
q2 as
(select q1.movie_id,avg_rating from q1
join ratings on q1.movie_id = ratings.movie_id
where avg_rating > 8),
q3 as
(select name_id,avg_rating from role_mapping
join q2 on q2.movie_id = role_mapping.movie_id
where category = 'actress'),
q4 as
(select name_id,count(*) as cnt from q3
group by name_id
order by cnt desc
limit 3)
select name from names
join q4 on names.id = q4.name_id

--Retrieve details for the top nine directors based on the number of movies, including average inter-movie duration, ratings, and more.
with q1 as 
(select *,cast(replace(replace(worlwide_gross_income,'$ ',''),'INR ','') as int) as income from movie a
join ratings b on a.id = b.movie_id
join director_mapping c on c.movie_id = a.id
join names d on c.name_id = d.id),
q2 as
(select name,
count(*) as movie_cnt,
avg(avg_rating) as rating,
sum(total_votes) as votes,
sum(income) as tot_inc
from q1
group by name)
select name from q2
order by rating desc, tot_inc desc, movie_cnt desc
limit 9

--Based on the analysis, provide recommendations for the types of content Bolly movies should focus on producing
with q1 as
(select *,
cast(replace(replace(worlwide_gross_income,'$ ',''),'INR ','') as int) as income from movie
left join genre on genre.movie_id = movie.id
left join ratings on ratings.movie_id = movie.id),
international as
(select genre,count(*) as movie_cnt,round(avg(avg_rating),2) as ar,round(avg(duration),2) as ad,round(avg(income),2) as ai,round(avg(total_votes),2) as av from q1
group by genre),
bolly as 
(select genre,count(*) as movie_cnt_in,round(avg(avg_rating),2) as ar_in,round(avg(duration),2) as ad_in,round(avg(income),2) as ai_in,round(avg(total_votes),2) as av_in from q1
where country like 'India'
group by genre)
select * from international
left join bolly on international.genre = bolly.genre

--Determine the average duration of movies released by Bolly Movies compared to the industry average.
select 'Global' as industry,round(avg(duration),2) as duration_average from movie
union
select 'Indian',round(avg(duration),2) as duration_average from movie where country like 'India'

--Analyse the correlation between the number of votes and the average rating for movies produced by Bolly Movies.
select total_votes,avg_rating from movie
join ratings on movie.id = ratings.movie_id
where country like 'India'
order by avg_rating asc


--Find the production house that has consistently produced movies with high ratings over the past three years.
with q1 as
(select * from movie
join ratings on movie.id = ratings.movie_id
where production_company is not ""),
q2 as 
(select production_company,avg(avg_rating) as ratt from q1
group by production_company),
q3 as
(select production_company,count(*) as cnt from q1
where avg_rating > 8
group by production_company)
select q2.production_company,ratt,cnt from q3
join q2 on q3.production_company = q2.production_company
order by cnt desc,ratt desc

--Identify the top three directors who have successfully delivered commercially successful movies with high ratings.
with q1 as
(select * from movie
join ratings on movie.id = ratings.movie_id),
q2 as
(select * from names
join director_mapping on
names.id = director_mapping.name_id),
q3 as
(select name,cast(replace(replace(worlwide_gross_income,'$ ',''),'INR ','') as int) as income,avg_rating from q2
join q1 on q1.id = q2.movie_id)
select name,avg(income) as inc,avg(avg_rating) as rat from q3
group by name
order by inc desc,rat desc
limit 3
